<?xml version="1.0"?>
<!--
   Data Hub Service (DHuS) - For Space data distribution.
   Copyright (C) 2013,2014,2015 GAEL Systems

   This file is part of DHuS software sources.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<!DOCTYPE rdf:RDF [
  <!ENTITY rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
  <!ENTITY owl  "http://www.w3.org/2002/07/owl#">
  <!ENTITY s1   "http://www.esa.int/s1#">
  <!ENTITY drb  "http://www.gael.fr/drb#">
  <!ENTITY dhus "http://www.gael.fr/dhus#">
  <!ENTITY img  "http://www.gael.fr/drb/image#">
]>

<rdf:RDF xmlns:owl ="&owl;"
         xmlns:rdf ="&rdf;"
         xmlns:rdfs="&rdfs;"
         xmlns:s1  ="&s1;"
         xmlns:drb ="&drb;"
         xmlns:img ="&img;"
         xmlns:dhus="&dhus;"
         xml:base  ="&s1;">

   <owl:Ontology rdf:about="&s1;"/>

   <!-- ***********************************************************************
   ****************************************************************************
   *                                                                          *
   *                                                                          *
   *                           METADATA EXTRACTION                            *
   *                                                                          *
   *                                                                          *
   ****************************************************************************
   ************************************************************************ -->

   <!-- Metadata Applicable to all Sentinel-1 product types -->
   <rdf:Description rdf:about="&s1;product">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <metadata
            queryable="platformName"
            category="platform" name="Satellite name" type="text/plain">
            Sentinel-1
         </metadata>,

         <metadata category="platform" name="Satellite number" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/
                platform/number)}
         </metadata>,

         <metadata queryable="platformIdentifier" 
            category="platform"
            name="NSSDC identifier"
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/
                platform/nssdcIdentifier)}
         </metadata>,

         <metadata category="platform" name="Operator" type="text/plain">
            European Space Agency
         </metadata>,

         <metadata category="platform" name="Mission type" type="text/plain">
            Earth observation
         </metadata>,

         <metadata category="platform" name="Carrier rocket" type="text/plain">
            Soyuz
         </metadata>,

         <metadata category="platform" name="Launch date" type="text/plain">
            April 4th, 2014
         </metadata>,

         <metadata category="platform" name="Satellite description" type="text/html">
            &lt;a target=&quot;_blank&quot; href=&quot;https://sentinel.esa.int/web/sentinel/missions/sentinel-1&quot;&gt;https://sentinel.esa.int/web/sentinel/missions/sentinel-1&lt;/a&gt;
         </metadata>,

         <metadata category="" name="Satellite description text" type="text/plain">
            The Sentinel-1 mission is a polar-orbiting satellite system for the
            continuation of Synthetic Aperture Radar (SAR) operational applications.
            Sentinel-1 is a C-band imaging radar mission to provide an
            all-weather day-and-night supply of imagery for GMES user services.
            The first Sentinel-1 satellite is envisaged to launch in 2013 and
            will be followed by the second satellite a few years later.
            The SAR sensor will operate in two main modes: Interferometric Wide
            Swath and Wave. The first has a swath width of 250 km and a ground
            resolution of 5 to 20 m. These two modes will satisfy most of the
            envisaged service requirements. Two other mutually exclusive modes
            are provided for continuity with other SAR missions and to
            accommodate emerging user requirements.
            Sentinel-1's revisit time, geographical coverage and rapid data
            dissemination are key to providing essential data for GMES. The
            Sentinel-1 pair is expected to provide coverage over Europe, Canada
            and main shipping routes in 13 days, regardless of weather
            conditions. Radar data will be delivered within an hour of
            acquisition  a big improvement over existing SAR systems.
            Sentinel-1 will aid sea-ice monitoringThe mission will benefit
            numerous services. For example, services that relate to the
            monitoring of Arctic sea-ice extent, routine sea-ice mapping,
            surveillance of the marine environment, including oil-spill
            monitoring and ship detection for maritime security, monitoring
            land-surface for motion risks, mapping for forest, water and soil
            management and mapping to support humanitarian aid and crisis
            situations.
            The design of the Sentinel-1 mission with its focus on reliability,
            operational stability, global coverage, consistent operations and
            quick data delivery is expected to enable the development of new
            applications and meet the evolving needs of GMES.
         </metadata>,

         <metadata queryable="instrumentName"
            category="instrument" 
            name="Instrument name" 
            type="text/plain">
            Synthetic Aperture Radar (C-band)
         </metadata>,

         <metadata queryable="instrumentShortName"
            category="instrument" 
            name="Instrument abbreviation" 
            type="text/plain">
            SAR-C SAR
         </metadata>,

         <metadata
            category="summary" 
            name="Instrument" 
            type="text/plain">
            SAR-C
         </metadata>,

         <metadata category="instrument" name="Instrument description" type="text/html">
            &lt;a target=&quot;_blank&quot; href=&quot;https://sentinel.esa.int/web/sentinel/missions/sentinel-1&quot;&gt;https://sentinel.esa.int/web/sentinel/missions/sentinel-1&lt;/a&gt;
         </metadata>,

         <metadata category="" name="Instrument description text" type="text/plain">
            The SAR Antenna Subsystem (SAS) is developed and build by Astrium
            GmbH. It is a large foldable planar phased array antenna, which is
            formed by a centre panel and two antenna side wings. In deployed
            configuration the antenna has an overall aperture of 12.3 x 0.84 m.
            The antenna provides a fast electronic scanning capability in
            azimuth and elevation and is based on low loss and highly stable
            waveguide radiators build in carbon fibre technology, which are
            already successfully used by the TerraSAR-X radar imaging mission.
            The SAR Electronic Subsystem (SES) is developed and build by
            Astrium Ltd. It provides all radar control, IF/ RF signal
            generation and receive data handling functions for the SAR
            Instrument. The fully redundant SES is based on a channelised
            architecture with one transmit and two receive chains, providing a
            modular approach to the generation and reception of wide-band
            signals and the handling of multi-polarisation modes. One key
            feature is the implementation of the Flexible Dynamic Block
            Adaptive Quantisation (FD-BAQ) data compression concept, which
            allows an efficient use of on-board storage resources and minimises
            downlink times.
         </metadata>,

         <metadata queryable="beginPosition" 
            category="product" 
            name="Sensing start" 
            type="text/date+iso8601">
            {
               drb:Iso8601DateFormatter(
                  data (manifest.safe/XFDU/metadataSection/
                  metadataObject[@ID="acquisitionPeriod"]/metadataWrap/xmlData/
                  acquisitionPeriod/startTime), "yyyy-MM-dd'T'hh:mm:ss.SSSSSS")
            }
         </metadata>,

         <metadata queryable="endPosition" 
            category="product" 
            name="Sensing stop" 
            type="text/date+iso8601">
            {
               drb:Iso8601DateFormatter(
                  data(manifest.safe/XFDU/metadataSection/
                  metadataObject[@ID="acquisitionPeriod"]/metadataWrap/xmlData/
                  acquisitionPeriod/stopTime), "yyyy-MM-dd'T'hh:mm:ss.SSSSSS")
            }
         </metadata>,

         <metadata queryable="orbitNumber" 
            category="product"
            name="Start orbit number"
            type="text/integer">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/orbitNumber[@type="start"])}
         </metadata>,

         <metadata queryable="lastOrbitNumber"
            category="product" 
            name="Stop orbit number" 
            type="text/integer">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/orbitNumber[@type="stop"])}
         </metadata>,

         <metadata category="product" name="Start relative orbit number" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/relativeOrbitNumber[@type="start"])}
         </metadata>,

         <metadata category="product" name="Stop relative orbit number" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/relativeOrbitNumber[@type="stop"])}
         </metadata>,

         <metadata category="product" name="Cycle number" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/cycleNumber)}
         </metadata>,

         <metadata category="product" name="Phase identifier" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/phaseIdentifier)}
         </metadata>,

         <metadata
            queryable="polarisationMode"
            category="product" 
            name="Polarisation" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                transmitterReceiverPolarisation)}
         </metadata>,

         <metadata category="summary" name="Satellite" type="text/plain">Sentinel-1</metadata>,

         <metadata queryable="size" 
            category="summary" name="Size" type="text/plain">
         {
            let $size := xs:integer(fn:sum (manifest.safe/XFDU/dataObjectSection//@size))
            return
               if ($size < 1024)
               then 
                  concat ($size, " bytes")
               else
                  if (($size div 1024) < 1024)
                  then
                     concat (($size div 1024), " KB")
                  else
                     if (($size div (1024*1024)) < 1024)
                        then concat (($size div (1024*1024)), " MB")
                     else
                        if (($size div (1024*1024*1024)) < 1024)
                        then
                           concat (($size div (1024*1024*1024)), " GB")
                        else 
                           concat (($size div (1024*1024*1024*1024)), " TB")
         }
         </metadata>,

         <metadata category="summary" 
            name="Date" 
            type="text/date+iso8601">
            {
               drb:Iso8601DateFormatter(
                  data (manifest.safe/XFDU/metadataSection/
                  metadataObject[@ID="acquisitionPeriod"]/metadataWrap/xmlData/
                  acquisitionPeriod/startTime), "yyyy-MM-dd'T'hh:mm:ss.SSSSSS")
            }
         </metadata>
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Footprint extracted from all applicable Sentinel-1 product types -->
   <rdf:Description rdf:about="&s1;manifestFootPrintProduct">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         declare function local:trim ($arg as xs:string) as xs:string
         {
            replace(replace(replace($arg,'\s+$',''),'^\s+',''), '\s+', ' ')
         };

         declare function local:revert ($coords as xs:string) as xs:string
         {
            let $tcoords := fn:tokenize ($coords, ",")
            return
               concat ($tcoords[2], ",", $tcoords[1])
         };

         declare function local:formatCoordinates ($coords as xs:string) as xs:string
         {
            let $tcoords := fn:tokenize (local:trim($coords), " ")
            let $reverted := 
               (
                  for $c in $tcoords
                  return
                     local:revert ($c)
                  ,
                  local:revert ($tcoords[1])
               )
            return
               fn:string-join ($reverted, " ")
         };

         declare function local:checkSrsName ($srs as xs:string) as xs:string
         {
            fn:replace($srs, "(?i)([a-z]*:)/*(.*)", "$1//$2")
         };

         declare function local:points() as xs:string
         {
            data(manifest.safe/XFDU/metadataSection/
                 metadataObject[fn:matches(@ID,".+FrameSet")]/
                 metadataWrap/xmlData/frameSet/frame[1]/
                 footPrint/coordinates)
         };

         declare function local:srsName() as xs:string
         {
            data(manifest.safe/XFDU/metadataSection/
                 metadataObject[fn:matches(@ID,".+FrameSet")]/
                 metadataWrap/xmlData/frameSet/frame[1]/footPrint/@srsName)
         };

         let $points_count:=fn:count(fn:tokenize(local:trim(local:points())," "))
         return
         if ($points_count<4)
         then
            trace ((), 
               concat ("XQUERY WARN: Not enough coordinates in footprint (", $points_count, ")"))
         else
         (
            <metadata 
               queryable="GMLfootprint"
               category="product" 
               name="Footprint" 
               type="application/gml+xml">
            <gml:Polygon srsName="{local:checkSrsName(local:srsName())}"
                 
               xmlns:gml="http://www.opengis.net/gml">
                  <gml:outerBoundaryIs>
                     <gml:LinearRing>
                        <gml:coordinates>
                        {
                           local:formatCoordinates(local:points())
                        }
                        </gml:coordinates>
                     </gml:LinearRing>
                  </gml:outerBoundaryIs>
               </gml:Polygon>
            </metadata>,
            <metadata 
               queryable="footprint"
               category="product" 
               name="JTS footprint" 
               type="application/jts">
               {
               concat ("POLYGON ((",
                  fn:replace ( 
                  fn:replace (
                  fn:replace (
                     local:formatCoordinates(local:points()), 
                        " +", "@"), "@*,@*", " "), "@", ","), "))")
                   (: switch " " with "," :)
                }
            </metadata>
         )
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Metadata of Sentinel-1 Level 0 product types -->
   <rdf:Description rdf:about="&s1;level0product">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <metadata category="product" name="Product level" type="text/plain">L0</metadata>,

         <metadata
            queryable="sensorOperationalMode"
            category="product" name="Instrument mode" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/platform/
                instrument/extension/instrumentMode/mode)}
         </metadata>,

         <metadata category="summary" name="Mode" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/platform/
                instrument/extension/instrumentMode/mode)}
         </metadata>,

         <metadata queryable="orbitDirection"
            category="product" 
            name="Pass direction" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/extension/orbitProperties/pass)}
         </metadata>,

         <metadata
            category="product" 
            name="Echo Compression Type" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                echoCompressionType)}
         </metadata>,

         <metadata
            category="product" 
            name="Noise Compression Type" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                noiseCompressionType)}
         </metadata>,

         <metadata
            category="product" 
            name="Cal Compression Type" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                calCompressionType)}
         </metadata>,

         <metadata
            category="product" 
            name="Byte Order" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                byteOrder)}
         </metadata>
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Metadata of Sentinel-1 Level 1 product types - Hand edited -->
   <rdf:Description rdf:about="&s1;level1product">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <metadata category="product" name="Product Level" type="text/plain">L1</metadata>,

         <metadata
            queryable="sensorOperationalMode"
            category="product" name="Instrument mode" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/platform/
                instrument/mode)}
         </metadata>,

         <metadata category="summary" name="Mode" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/platform/
                instrument/mode)}
         </metadata>,

         <metadata  queryable="swathIdentifier" 
            category="product" name="Instrument swath" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="platform"]/metadataWrap/xmlData/platform/
                instrument/swath)}
         </metadata>,

         <metadata queryable="orbitDirection"
            category="product" 
            name="Pass direction" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[fn:matches(@ID,".+OrbitReference")]/
                metadataWrap/xmlData/orbitReference/pass)}
         </metadata>,

         <metadata queryable="productType"
            category="product" name="Product type" type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                productType)}
         </metadata>,

         <metadata
            category="product" 
            name="Timeliness Category" 
            type="text/plain">
            {data(manifest.safe/XFDU/metadataSection/
                metadataObject[@ID="generalProductInformation"]/
                metadataWrap/xmlData/
                *[matches(name(),"standAloneProductInformation|generalProductInformation")]/
                productTimelinessCategory)}
         </metadata>
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Metadata of Sentinel-1 Level 1 product types -
        Generated from product annotation XML Schemas -->
   <rdf:Description rdf:about="&s1;level1product">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
      declare function local:deduplicate($list)
      {
         if (fn:empty($list)) then ()
         else
            let $head := $list[1],
                $tail := $list[position() > 1]
         return
            if (fn:exists($tail[ . = $head ])) then local:deduplicate($tail)
            else ($head, local:deduplicate($tail))
      };

      declare function local:values($list) {
         fn:string-join(local:deduplicate(fn:data($list)), ' ')
      };

      declare function local:getMetadata($name, $prefix, $list) {
         let $values := local:values($list)
         return
            if ($values)
            then
               <metadata name="{$name}" category="">
               {
                  $prefix, $values
               }
               </metadata>
            else
               ()
      };

      (: Metadata from Level 1 Product Annotation file :)
      let $doc := annotation/*[fn:matches(fn:name(), '.*.xml')]
      return
      (
         local:getMetadata('missionId', 'mission id',
            $doc/product/adsHeader/missionId),
         local:getMetadata('productType', 'product type',
            $doc/product/adsHeader/productType),
         local:getMetadata('polarisation', 'polarisation',
            $doc/product/adsHeader/polarisation),
         local:getMetadata('mode', 'mode',
            $doc/product/adsHeader/mode),
         local:getMetadata('swath', 'swath',
            $doc/product/adsHeader/swath),
         local:getMetadata('absoluteOrbitNumber', 'absolute orbit number',
            $doc/product/adsHeader/absoluteOrbitNumber),
         local:getMetadata('missionDataTakeId', 'mission data take id',
            $doc/product/adsHeader/missionDataTakeId),
         local:getMetadata('imageNumber', 'image number',
            $doc/product/adsHeader/imageNumber),
         local:getMetadata('inputDataMeanOutsideNominalRangeFlag', 'input data mean outside nominal range flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/inputDataMeanOutsideNominalRangeFlag),
         local:getMetadata('inputDataStDevOutsideNominalRangeFlag', 'input data st dev outside nominal range flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/inputDataStDevOutsideNominalRangeFlag),
         local:getMetadata('numDownlinkInputDataGaps', 'num downlink input data gaps',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/numDownlinkInputDataGaps),
         local:getMetadata('downlinkGapsInInputDataSignificantFlag', 'downlink gaps in input data significant flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/downlinkGapsInInputDataSignificantFlag),
         local:getMetadata('numDownlinkInputMissingLines', 'num downlink input missing lines',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/numDownlinkInputMissingLines),
         local:getMetadata('downlinkMissingLinesSignificantFlag', 'downlink missing lines significant flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/downlinkMissingLinesSignificantFlag),
         local:getMetadata('numInstrumentInputDataGaps', 'num instrument input data gaps',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/numInstrumentInputDataGaps),
         local:getMetadata('instrumentGapsInInputDataSignificantFlag', 'instrument gaps in input data significant flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/instrumentGapsInInputDataSignificantFlag),
         local:getMetadata('numInstrumentInputMissingLines', 'num instrument input missing lines',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/numInstrumentInputMissingLines),
         local:getMetadata('instrumentMissingLinesSignificantFlag', 'instrument missing lines significant flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/instrumentMissingLinesSignificantFlag),
         local:getMetadata('chirpSourceUsed', 'chirp source used',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/chirpSourceUsed),
         local:getMetadata('pgSourceUsed', 'pg source used',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/pgSourceUsed),
         local:getMetadata('rrfSpectrumUsed', 'rrf spectrum used',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/rrfSpectrumUsed),
         local:getMetadata('replicaReconstructionFailedFlag', 'replica reconstruction failed flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/replicaReconstructionFailedFlag),
         local:getMetadata('pgProductDerivationFailedFlag', 'pg product derivation failed flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/pgProductDerivationFailedFlag),
         local:getMetadata('invalidDownlinkParamsFlag', 'invalid downlink params flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/downlinkQuality/invalidDownlinkParamsFlag),
         local:getMetadata('iBiasSignificanceFlag', 'i bias significance flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/rawDataAnalysisQuality/iBiasSignificanceFlag),
         local:getMetadata('qBiasSignificanceFlag', 'q bias significance flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/rawDataAnalysisQuality/qBiasSignificanceFlag),
         local:getMetadata('iqGainSignificanceFlag', 'iq gain significance flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/rawDataAnalysisQuality/iqGainSignificanceFlag),
         local:getMetadata('iqQuadratureDepartureSignificanceFlag', 'iq quadrature departure significance flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/rawDataAnalysisQuality/iqQuadratureDepartureSignificanceFlag),
         local:getMetadata('dcMethod', 'dc method',
            $doc/product/qualityInformation/qualityDataList/qualityData/dopplerCentroidQuality/dcMethod),
         local:getMetadata('dopplerCentroidUncertainFlag', 'doppler centroid uncertain flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/dopplerCentroidQuality/dopplerCentroidUncertainFlag),
         local:getMetadata('outputDataMeanOutsideNominalRangeFlag', 'output data mean outside nominal range flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/imageQuality/outputDataMeanOutsideNominalRangeFlag),
         local:getMetadata('outputDataStDevOutsideNominalRangeFlag', 'output data st dev outside nominal range flag',
            $doc/product/qualityInformation/qualityDataList/qualityData/imageQuality/outputDataStDevOutsideNominalRangeFlag),
         local:getMetadata('pass', 'pass',
            $doc/product/generalAnnotation/productInformation/pass),
         local:getMetadata('timelinessCategory', 'timeliness category',
            $doc/product/generalAnnotation/productInformation/timelinessCategory),
         local:getMetadata('projection', 'projection',
            $doc/product/generalAnnotation/productInformation/projection),
         local:getMetadata('swath', 'swath',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/swath),
         local:getMetadata('numErrSyncMarker', 'num err sync marker',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSyncMarker),
         local:getMetadata('numErrDataTakeId', 'num err data take id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrDataTakeId),
         local:getMetadata('numErrEccNumber', 'num err ecc number',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrEccNumber),
         local:getMetadata('numErrTestMode', 'num err test mode',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrTestMode),
         local:getMetadata('numErrRxChannelId', 'num err rx channel id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrRxChannelId),
         local:getMetadata('numErrInstrumentConfigId', 'num err instrument config id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrInstrumentConfigId),
         local:getMetadata('numErrPacketCount', 'num err packet count',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrPacketCount),
         local:getMetadata('numErrPriCount', 'num err pri count',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrPriCount),
         local:getMetadata('numErrBaqMode', 'num err baq mode',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrBaqMode),
         local:getMetadata('numErrBaqBlockLength', 'num err baq block length',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrBaqBlockLength),
         local:getMetadata('numErrRangeDecimation', 'num err range decimation',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrRangeDecimation),
         local:getMetadata('numErrRxGain', 'num err rx gain',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrRxGain),
         local:getMetadata('numErrTxRampRate', 'num err tx ramp rate',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrTxRampRate),
         local:getMetadata('numErrTxPulseStartFrequency', 'num err tx pulse start frequency',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrTxPulseStartFrequency),
         local:getMetadata('numErrRank', 'num err rank',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrRank),
         local:getMetadata('numErrPri', 'num err pri',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrPri),
         local:getMetadata('numErrSwst', 'num err swst',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSwst),
         local:getMetadata('numErrSwl', 'num err swl',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSwl),
         local:getMetadata('numErrPolarisation', 'num err polarisation',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrPolarisation),
         local:getMetadata('numErrTempComp', 'num err temp comp',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrTempComp),
         local:getMetadata('numErrElevationBeamAddress', 'num err elevation beam address',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrElevationBeamAddress),
         local:getMetadata('numErrAzimuthBeamAddress', 'num err azimuth beam address',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrAzimuthBeamAddress),
         local:getMetadata('numErrSasTestMode', 'num err sas test mode',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSasTestMode),
         local:getMetadata('numErrCalType', 'num err cal type',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrCalType),
         local:getMetadata('numErrCalibrationBeamAddress', 'num err calibration beam address',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrCalibrationBeamAddress),
         local:getMetadata('numErrCalMode', 'num err cal mode',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrCalMode),
         local:getMetadata('numErrTxPulseNumber', 'num err tx pulse number',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrTxPulseNumber),
         local:getMetadata('numErrSignalType', 'num err signal type',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSignalType),
         local:getMetadata('numErrSwapFlag', 'num err swap flag',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSwapFlag),
         local:getMetadata('numErrSwathNumber', 'num err swath number',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrSwathNumber),
         local:getMetadata('numErrNumberOfQuads', 'num err number of quads',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numErrNumberOfQuads),
         local:getMetadata('numIspHeaderErrors', 'num isp header errors',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/bitErrorCount/numIspHeaderErrors),
         local:getMetadata('rank', 'rank',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/rank),
         local:getMetadata('dataTakeId', 'data take id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/dataTakeId),
         local:getMetadata('eccNumber', 'ecc number',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/eccNumber),
         local:getMetadata('rxChannelId', 'rx channel id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/rxChannelId),
         local:getMetadata('instrumentConfigId', 'instrument config id',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/instrumentConfigId),
         local:getMetadata('baqBlockLength', 'baq block length',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/dataFormat/baqBlockLength),
         local:getMetadata('echoFormat', 'echo format',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/dataFormat/echoFormat),
         local:getMetadata('noiseFormat', 'noise format',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/dataFormat/noiseFormat),
         local:getMetadata('calibrationFormat', 'calibration format',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/dataFormat/calibrationFormat),
         local:getMetadata('filterLength', 'filter length',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/rangeDecimation/filterLength),
         local:getMetadata('swathNumber', 'swath number',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/swathNumber),
         local:getMetadata('aocsOpMode', 'aocs op mode',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/pointingStatusList/pointingStatus/aocsOpMode),
         local:getMetadata('rollErrorFlag', 'roll error flag',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/pointingStatusList/pointingStatus/rollErrorFlag),
         local:getMetadata('pitchErrorFlag', 'pitch error flag',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/pointingStatusList/pointingStatus/pitchErrorFlag),
         local:getMetadata('yawErrorFlag', 'yaw error flag',
            $doc/product/generalAnnotation/downlinkInformationList/downlinkInformation/downlinkValues/pointingStatusList/pointingStatus/yawErrorFlag),
         local:getMetadata('swath', 'swath',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/swath),
         local:getMetadata('chirpSource', 'chirp source',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/referenceReplica/chirpSource),
         local:getMetadata('pgSource', 'pg source',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/referenceReplica/pgSource),
         local:getMetadata('reconstructedReplicaValidFlag', 'reconstructed replica valid flag',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/replicaList/replica/reconstructedReplicaValidFlag),
         local:getMetadata('relativePgProductValidFlag', 'relative pg product valid flag',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/replicaList/replica/relativePgProductValidFlag),
         local:getMetadata('absolutePgProductValidFlag', 'absolute pg product valid flag',
            $doc/product/generalAnnotation/replicaInformationList/replicaInformation/replicaList/replica/absolutePgProductValidFlag),
         local:getMetadata('swath', 'swath',
            $doc/product/generalAnnotation/noiseList/noise/swath),
         local:getMetadata('numberOfNoiseLines', 'number of noise lines',
            $doc/product/generalAnnotation/noiseList/noise/numberOfNoiseLines),
         local:getMetadata('productComposition', 'product composition',
            $doc/product/imageAnnotation/imageInformation/productComposition),
         local:getMetadata('sliceNumber', 'slice number',
            $doc/product/imageAnnotation/imageInformation/sliceNumber),
         local:getMetadata('sliceNumber', 'slice number',
            $doc/product/imageAnnotation/imageInformation/sliceList/slice/sliceNumber),
         local:getMetadata('pixelValue', 'pixel value',
            $doc/product/imageAnnotation/imageInformation/pixelValue),
         local:getMetadata('outputPixels', 'output pixels',
            $doc/product/imageAnnotation/imageInformation/outputPixels),
         local:getMetadata('numberOfSamples', 'number of samples',
            $doc/product/imageAnnotation/imageInformation/numberOfSamples),
         local:getMetadata('numberOfLines', 'number of lines',
            $doc/product/imageAnnotation/imageInformation/numberOfLines),
         local:getMetadata('rawDataAnalysisUsed', 'raw data analysis used',
            $doc/product/imageAnnotation/processingInformation/rawDataAnalysisUsed),
         local:getMetadata('orbitDataFileUsed', 'orbit data file used',
            $doc/product/imageAnnotation/processingInformation/orbitDataFileUsed),
         local:getMetadata('attitudeDataFileUsed', 'attitude data file used',
            $doc/product/imageAnnotation/processingInformation/attitudeDataFileUsed),
         local:getMetadata('antennaElevationPatternApplied', 'antenna elevation pattern applied',
            $doc/product/imageAnnotation/processingInformation/antennaElevationPatternApplied),
         local:getMetadata('antennaAzimuthPatternApplied', 'antenna azimuth pattern applied',
            $doc/product/imageAnnotation/processingInformation/antennaAzimuthPatternApplied),
         local:getMetadata('antennaAzimuthElementPatternApplied', 'antenna azimuth element pattern applied',
            $doc/product/imageAnnotation/processingInformation/antennaAzimuthElementPatternApplied),
         local:getMetadata('dcMethod', 'dc method',
            $doc/product/imageAnnotation/processingInformation/dcMethod),
         local:getMetadata('dcInputData', 'dc input data',
            $doc/product/imageAnnotation/processingInformation/dcInputData),
         local:getMetadata('rangeSpreadingLossCompensationApplied', 'range spreading loss compensation applied',
            $doc/product/imageAnnotation/processingInformation/rangeSpreadingLossCompensationApplied),
         local:getMetadata('srgrConversionApplied', 'srgr conversion applied',
            $doc/product/imageAnnotation/processingInformation/srgrConversionApplied),
         local:getMetadata('detectionPerformed', 'detection performed',
            $doc/product/imageAnnotation/processingInformation/detectionPerformed),
         local:getMetadata('thermalNoiseCorrectionPerformed', 'thermal noise correction performed',
            $doc/product/imageAnnotation/processingInformation/thermalNoiseCorrectionPerformed),
         local:getMetadata('chirpSource', 'chirp source',
            $doc/product/imageAnnotation/processingInformation/chirpSource),
         local:getMetadata('pgSource', 'pg source',
            $doc/product/imageAnnotation/processingInformation/pgSource),
         local:getMetadata('rrfSpectrum', 'rrf spectrum',
            $doc/product/imageAnnotation/processingInformation/rrfSpectrum),
         local:getMetadata('applicationLutId', 'application lut id',
            $doc/product/imageAnnotation/processingInformation/applicationLutId),
         local:getMetadata('swath', 'swath',
            $doc/product/imageAnnotation/processingInformation/swathProcParamsList/swathProcParams/swath),
         local:getMetadata('windowType', 'window type',
            $doc/product/imageAnnotation/processingInformation/swathProcParamsList/swathProcParams/rangeProcessing/windowType),
         local:getMetadata('numberOfLooks', 'number of looks',
            $doc/product/imageAnnotation/processingInformation/swathProcParamsList/swathProcParams/rangeProcessing/numberOfLooks),
         local:getMetadata('windowType', 'window type',
            $doc/product/imageAnnotation/processingInformation/swathProcParamsList/swathProcParams/azimuthProcessing/windowType),
         local:getMetadata('numberOfLooks', 'number of looks',
            $doc/product/imageAnnotation/processingInformation/swathProcParamsList/swathProcParams/azimuthProcessing/numberOfLooks),
         local:getMetadata('swath', 'swath',
            $doc/product/imageAnnotation/processingInformation/inputDimensionsList/inputDimensions/swath),
         local:getMetadata('ellipsoidName', 'ellipsoid name',
            $doc/product/imageAnnotation/processingInformation/ellipsoidName),
         local:getMetadata('correctBistaticDelayFlag', 'correct bistatic delay flag',
            $doc/product/imageAnnotation/processingInformation/correctBistaticDelayFlag),
         local:getMetadata('dataDcRmsErrorAboveThreshold', 'data dc rms error above threshold',
            $doc/product/dopplerCentroid/dcEstimateList/dcEstimate/dataDcRmsErrorAboveThreshold),
         local:getMetadata('swath', 'swath',
            $doc/product/antennaPattern/antennaPatternList/antennaPattern/swath),
         local:getMetadata('linesPerBurst', 'lines per burst',
            $doc/product/swathTiming/linesPerBurst),
         local:getMetadata('samplesPerBurst', 'samples per burst',
            $doc/product/swathTiming/samplesPerBurst),
         local:getMetadata('byteOffset', 'byte offset',
            $doc/product/swathTiming/burstList/burst/byteOffset),
         local:getMetadata('swath', 'swath',
            $doc/product/swathMerging/swathMergeList/swathMerge/swath)
      )
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Metadata of Sentinel-1 Level 2 product types -->
   <rdf:Description rdf:about="&s1;level2product">
      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <metadata category="product" name="Product Level" type="text/plain">L2</metadata>
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

   <!-- Append Image descriptors to applicable Sentinel-1 product types -->
   <rdf:Description rdf:about="&s1;product">
      <rdfs:subClassOf rdf:resource="&s1;manifestFootPrintProduct"/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <img:descriptor rdf:parseType="Literal" xmlns:img="&img;">
         <img:collection xmlns:img="&img;">
            <img:raster name="preview">
               <img:source>preview/quick-look.png</img:source>
            </img:raster>
         </img:collection>
      </img:descriptor>

      <img:rendering rdf:parseType="Literal" xmlns:img="&img;">
         <img:operator name="H-flip">
            <img:script language="beanshell" version="1.0">
               ParameterBlock transpose_pb = new ParameterBlock();
               transpose_pb.addSource(source);
               transpose_pb.add(javax.media.jai.operator.TransposeDescriptor.FLIP_HORIZONTAL);
               return JAI.create("transpose",transpose_pb);
            </img:script>
         </img:operator>
      </img:rendering>
      
   </rdf:Description>

</rdf:RDF>
